<?xml version="1.0" encoding="utf-8"?>
<rdf:RDF
  xmlns:py="http://genshi.edgewall.org/"
  xmlns:void="http://rdfs.org/ns/void#"
  xmlns:foaf="http://xmlns.com/foaf/0.1/"
  xmlns:owl="http://www.w3.org/2002/07/owl#"
  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:dcterms="http://purl.org/dc/terms/"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
  xmlns:wv="http://vocab.org/waiver/terms/norms"
  xmlns:sd="http://www.w3.org/ns/sparql-service-description#"
  xmlns:adapta="http://www.morelab.deusto.es/ontologies/adapta-metadata#"
>

<void:Dataset rdf:about="${ h.url_for(controller='package',action='read',id=c.pkg_dict['name'], qualified=True)}">
    <owl:sameAs rdf:resource="urn:uuid:${c.pkg_dict['id']}"/>
    <foaf:homepage rdf:resource="${ h.url_for(controller='package',action='read',id=c.pkg_dict['name'], qualified=True)}"/>
    <rdfs:label>${c.pkg_dict['name']}</rdfs:label>
    
    <!-- basic information section -->
    <dcterms:title>${c.pkg_dict['title']}</dcterms:title>
    <dcterms:description>${c.pkg_dict['notes']}</dcterms:description>
    
    <dcterms:creator py:if="c.pkg_dict.get('author', None)">
      <rdf:Description>
        <foaf:name>${c.pkg_dict['author']}</foaf:name>
        <foaf:mbox py:if="c.pkg_dict.get('maintainer_email', None)" rdf:resource="mailto:${c.pkg_dict['author_email']}"/>
      </rdf:Description>
    </dcterms:creator>
    
    <!-- <dcterms:publisher  py:if="c.pkg_dict.get('author', None)">
      <rdf:Description>
        <foaf:name>${ c.pkg_dict['author'] }</foaf:name>
        <foaf:mbox  py:if="c.pkg_dict.get('maintainer_email', None)" rdf:resource="mailto:${c.pkg_dict['author_email']}"/>
      </rdf:Description>
    </dcterms:publisher> -->
    
    <!-- <dcterms:date rdf:datatype="&xsd;dateTime">2009-09-30T11:01:59Z</dcterms:date> -->
    <!-- <dcterms:created rdf:datatype="&xsd;dateTime">2009-09-30T11:01:59Z</dcterms:created> -->
    <!-- <dcterms:issued rdf:datatype="&xsd;dateTime">2009-09-30T11:01:59Z</dcterms:issued> -->
    <!-- <dcterms:modified rdf:datatype="&xsd;dateTime">2009-09-30T11:01:59Z</dcterms:modified> -->
    
    <dcterms:contributor py:if="c.pkg_dict.get('maintainer', None)">
      <rdf:Description>
        <foaf:name>${c.pkg_dict['maintainer']}</foaf:name>
        <foaf:mbox  py:if="c.pkg_dict.get('maintainer_email', None)" rdf:resource="mailto:${c.pkg_dict['maintainer_email']}"/>
      </rdf:Description>
    </dcterms:contributor>
    
    <!-- end of basic information section -->
    
    <!-- license section -->
    <dcterms:rights py:if="c.pkg_dict.get('license_url', None)" rdf:resource="${c.pkg_dict['license_url']}"/>
    <!-- end of license section -->
    
    <!-- subjects section -->
    <!-- <dc:subject rdf:resource="http://dbpedia.org/resource/Computer_science" /> -->
    <!-- end of subjects section-->
    
    <!-- technical features section -->
    <!-- <void:feature rdf:resource="http://www.w3.org/ns/formats/RDF_XML" /> -->
    <!-- end of technical feature section -->
    
    <!-- access metadata section -->
    <py:if test="c.pkg_dict['resources']">
        <py:for each="resource in c.pkg_dict['resources']">
            <py:if test="resource['resource_type'] == 'api' and resource['format'].lower() == 'api/sparql'">
    <void:sparqlEndpoint rdf:resource="${resource['url']}" />
            </py:if>
        </py:for>
    </py:if>
    
    <!-- <void:dataDump rdf:resource="http://data.nytimes.com/people.rdf" /> -->
    <!-- <void:dataDump rdf:resource="http://data.nytimes.com/organizations.rdf" /> -->
    
    <!-- end of acess metadata section -->
    
    <!-- structural metadata section -->
    <py:for each="vocabulary in eval(c.extra_metadata['vocabularies']).keys()">
    <void:vocabulary rdf:resource="${vocabulary}" />
    </py:for>
    
    <void:triples py:if="c.extra_metadata.get('triples', None)">${c.extra_metadata.get('triples')}</void:triples>
    <void:entities py:if="c.extra_metadata.get('entities', None)">${c.extra_metadata.get('entities')}</void:entities>
    <void:classes py:if="c.extra_metadata.get('classes', None)">${c.extra_metadata.get('classes')}</void:classes>
    <void:properties py:if="c.extra_metadata.get('properties', None)">${c.extra_metadata.get('properties')}</void:properties>
    <void:distinctSubjects py:if="c.extra_metadata.get('subjects', None)">${c.extra_metadata.get('subjects')}</void:distinctSubjects>
    <void:distinctObjects py:if="c.extra_metadata.get('objects', None)">${c.extra_metadata.get('objects')}</void:distinctObjects>
    <!-- end of structural metadata section -->
    
    <!-- adapta extension section -->
    
    <adapta:accesible py:if="c.extra_metadata.get('accesible', None)">${c.extra_metadata.get('accesible').lower()}</adapta:accesible>
    
    <adapta:instances py:if="c.extra_metadata.get('instances', None)">${c.extra_metadata.get('instances')}</adapta:instances>
    
    <adapta:links py:if="c.extra_metadata.get('all_links', None)">${c.extra_metadata.get('all_links')}</adapta:links>
    <adapta:outgoing py:if="c.extra_metadata.get('outgoing_links', None)">${c.extra_metadata.get('outgoing_links')}</adapta:outgoing>
    <adapta:ingoing py:if="c.extra_metadata.get('ingoing_links', None)">${c.extra_metadata.get('ingoing_links')}</adapta:ingoing>
    <adapta:inner py:if="c.extra_metadata.get('inner_links', None)">${c.extra_metadata.get('inner_links')}</adapta:inner>
    
    <!-- end of adapta extension section -->
    
    <!-- extra information section -->
    <py:for each="extra_dict in c.pkg_dict.get('extras', None)">
        <dcterms:relation>
          <rdf:Description>
            <rdfs:label>${extra_dict.get('key','')}</rdfs:label>
            <rdf:value>${extra_dict.get('value','')}</rdf:value>
          </rdf:Description>
        </dcterms:relation>
    </py:for>
    <!-- end of extra information section -->
    
</void:Dataset>

</rdf:RDF>

